Exercises:

1. What are some pros and cons of using linked lists instead of arrays?

A: Linked lists can use multiple data types. Linked lists allocate memory for each memory separately and when necessary. In an array, it allocates the memory for all of its elements. A con for linked lists is that once you locate a linked list, you can't start it within the list. It must start at the first node (head) and in order. Whereas in array, you can access an element within. Linked lists can consume more memory than arrays.

2. Come up with a real word example of a linked list.

A: Going through a music playlist. For example, going backward, forward, adding new songs. Another example is a person going up the elevator and hitting every floor to the top. 

Programming Questions:

1. The linked lists push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a function implementation of the method. 

A: In the pseudocode, there is no loop to move node to node on the list.

function LinkedList() {
            this.head = null;
        }

        LinkedList.prototype.push = function (element) {
            var node = {
                value: element,
                next: null
            }

            var current;

            if (!this.head) {
                this.head = node;
            } else {
                current = this.head;

                while (current.next) {
                    current = current.next;
                }

                current.next = node;
            }
        }

        var list = new LinkedList();

        list.push("a");
        list.push("b");
        list.push("c");

2. Given an unsorted singly linked list, remove all duplicates from the linked list.

 function LinkedList() {
            this.head = null;
        }

        LinkedList.prototype.push = function (element) {
            var node = {
                value: element,
                next: null
            }

            var current;

            if (!this.head) {
                this.head = node;
            } else {
                current = this.head;

                while (current.next) {
                    current = current.next;
                }

                current.next = node;
            }
        }


        LinkedList.prototype.duplicate = function () {
            if (!this.head || !this.head.next) {
                console.log("no duplicates");
                return;
            }

            var thisNode = this.head;
            while (thisNode != null) {
                var previousNode = thisNode;
                var nextNode = thisNode.next;
                while (nextNode != null) {
                    if (thisNode.value == nextNode.value) {
                        previousNode.next = nextNode.next;
                        this.length--;
                    } else {
                        previousNode = nextNode;
                    }
                    nextNode = nextNode.next;
                }
                thisNode = thisNode.next;
            }
            return this;
        }

	list.push("a");
        list.push("a");
        list.push("b");
        list.push("c");
        list.push('c');
        list.duplicate();


3. Given an unsorted singly linked list, reverse it. 

     function LinkedList() {
            this.head = null;
        }

        LinkedList.prototype.push = function (element) {
            var node = {
                value: element,
                next: null
            }

            var current;

            if (!this.head) {
                this.head = node;
            } else {
                current = this.head;

                while (current.next) {
                    current = current.next;
                }

                current.next = node;
            }
        }


        LinkedList.prototype.duplicate = function () {
            if (!this.head || !this.head.next) {
                console.log("no duplicates");
                return;
            }

            var thisNode = this.head;
            while (thisNode != null) {
                var previousNode = thisNode;
                var nextNode = thisNode.next;
                while (nextNode != null) {
                    if (thisNode.value == nextNode.value) {
                        previousNode.next = nextNode.next;
                        this.length--;
                    } else {
                        previousNode = nextNode;
                    }
                    nextNode = nextNode.next;
                }
                thisNode = thisNode.next;
            }
            return this;
        }

        LinkedList.prototype.reverse = function () {

            var currentNode = this.head;
            var previousNode = null;
            var nextNode;

            while (currentNode) {
                nextNode = currentNode.next;
                currentNode.next = previousNode;
                previousNode = currentNode;
                currentNode = nextNode;

            }
            this.head = previousNode;
            return previousNode;
        }

        var list = new LinkedList();

        list.push("a");
        list.push("a");
        list.push("b");
        list.push("c");
        list.push('c');
        list.duplicate();
        list.reverse();



