Exercises:

1. What is a hash table?

A: A hash table is a type of data structure that stores each value by linking it to a key.

2. What is hashing?

A: Hashing is the conversion of data into a hash code using a hashing function.


3. How does a hash table store data?

A: The key is converted into a dashcode using a hashing function. The hash code is modded to get the array index. Then, the value is stored in the array index.  

4. How are hash tables and objects different?

A: Hash tables are intended to be stored as collections of similar data, whereas, objects don't have to be the same data. Hash tables are stored by some form of identifier such as a code or an employee ID number.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data?

	- A list of pets and their unique names  - Hash table

	- The name, age, and the birthday of your best friend - Object

	- The name and location of every company in a given city - Hash table 

	- All of the books checked out from a library by a particular 		individual. - Hash table

	- The primary and secondary phone numbers for a contact - Object
	
6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table. 

   const hash = (key, max) => {
            let hash = 0;

            for (let i = 0; i < key.length; i++) {
                hash += key.charCodeAt(i);
            }
            return hash % max;
        }

        class HashTable {
            constructor() {
                this.max = 25;
                this.buckets = Array(this.max);

                for (let i = 0; i < this.buckets.length; i++) {
                    this.buckets[i] = new Map();
                }
            }
            add(key, value) {
                let index = hash(key, this.max);
                this.buckets[index].set(key, value);

            }

            search(key) {
                let index = hash(key, this.max);
                return this.buckets[index].get(key);

            }
        }

        const ht = new HashTable();

  ht.add("(888) 559-1234", { name: "John Doe", address: "123 fake street" });
 ht.add("(888) 555-9244", { name: "Jane Moore", address: "456 oak street" });
   ht.add("(888) 555-8003", { name: "Bob Smith", address: "789 fair lane" });
        console.log(ht.search("(888) 559-1234"));

7. Build a system that allows a store owner to track their store's inventory using a hash table for storage. 

const hash = (key, max) => {
            let hash = 0;

            for (let i = 0; i < key.length; i++) {
                hash += key.charCodeAt(i);
            }
            return hash % max;
        }

        class HashTable {
            constructor() {
                this.max = 25;
                this.buckets = Array(this.max);

                for (let i = 0; i < this.buckets.length; i++) {
                    this.buckets[i] = new Map();
                }
            }
            add(key, value) {
                let index = hash(key, this.max);
                this.buckets[index].set(key, value);

            }

            inventory(key) {
                let index = hash(key, this.max);
                return this.buckets[index].get(key);

            }


        }

        let ht = new HashTable();

        ht.add("Horror", 2000);
        ht.add("Comics", 3000);
        ht.add("Romance", 1500);
        console.log(ht.inventory("Horror"));


8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data. 

     class HashTable {
            constructor() {
                this.count = 10;
                this.buckets = [];
            }

            hash(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash += key.charCodeAt(i)
                }
                return hash;
            }

            add(entry) {
                var key = this.hash(entry.date);
                var arrayIndex = key % this.count;
                this.buckets[arrayIndex] = entry;
            }

            get(date) {
                var key = this.hash(date);
                var arrayIndex = key % this.count;
                return this.buckets[arrayIndex];
            }
        }

        class Newspaper {
            constructor(publisher, date, article) {
                this.publisher = publisher;
                this.date = date;
                this.article = article;
            }
        };

        var sn = new Newspaper('NY Times', '01/31/14', 'Life of Dogs');

        var usa = new Newspaper('USA Today', '02/22/15', 'Life of Cats')

        var hashTable = new HashTable();

        hashTable.add(sn);
        hashTable.add(usa);

        console.log(sn);
        console.log(usa);

        console.log(hashTable.get('01/31/14'));
        hashTable.get('02/22/15');
